/*
 * Starlink Enterprise API
 *
 * <h3>Description</h3>API to manage accounts and user terminals. This page is deprecated, please use the new documentation site: <a href='https://starlink.readme.io/'>https://starlink.readme.io/</a><h3>Authentication - OIDC</h3><p>To authenticate with this API using OIDC, <a target='_blank' href='/api/auth/.well-known/openid-configuration'>Well Known URL</a> and attach the result to your requests with the <strong>Authorize</strong> button below.</p>
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserTerminalResponse {
    /// User Terminal ID. This ID is not printed anywhere on the kit or hardware. Example: 00020900-002220cc-225b9199
    #[serde(rename = "userTerminalId", skip_serializing_if = "Option::is_none")]
    pub user_terminal_id: Option<String>,
    /// Nickname of the user terminal.
    #[serde(rename = "nickname", skip_serializing_if = "Option::is_none")]
    pub nickname: Option<String>,
    /// Kit Serial Number. This ID can be found on the box that the hardware came in. Example: KIT00142069
    #[serde(rename = "kitSerialNumber", skip_serializing_if = "Option::is_none")]
    pub kit_serial_number: Option<String>,
    /// Dish Serial Number. This ID can be found on the dish itself. Example: 2DHT00542069
    #[serde(rename = "dishSerialNumber", skip_serializing_if = "Option::is_none")]
    pub dish_serial_number: Option<String>,
    /// The service line the user terminal is assoicated with if it has service, Example: AST-511274-31364-54
    #[serde(rename = "serviceLineNumber", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub service_line_number: Option<Option<String>>,
    /// Indicates if user terminal is active
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    /// Routers currently bonded to this UT
    #[serde(rename = "routers", skip_serializing_if = "Option::is_none")]
    pub routers: Option<Vec<models::RouterResponse>>,
}

impl UserTerminalResponse {
    pub fn new() -> UserTerminalResponse {
        UserTerminalResponse {
            user_terminal_id: None,
            nickname: None,
            kit_serial_number: None,
            dish_serial_number: None,
            service_line_number: None,
            active: None,
            routers: None,
        }
    }
}

