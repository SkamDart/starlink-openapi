/*
 * Starlink Enterprise API
 *
 * <h3>Description</h3>API to manage accounts and user terminals. This page is deprecated, please use the new documentation site: <a href='https://starlink.readme.io/'>https://starlink.readme.io/</a><h3>Authentication - OIDC</h3><p>To authenticate with this API using OIDC, <a target='_blank' href='/api/auth/.well-known/openid-configuration'>Well Known URL</a> and attach the result to your requests with the <strong>Authorize</strong> button below.</p>
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RouterConfigResponse {
    /// Account Number this config is stored under.
    #[serde(rename = "accountNumber", skip_serializing_if = "Option::is_none")]
    pub account_number: Option<String>,
    /// Config Id.
    #[serde(rename = "configId", skip_serializing_if = "Option::is_none")]
    pub config_id: Option<String>,
    /// Nickname for this config. Must be less than 100 characters.
    #[serde(rename = "nickname", skip_serializing_if = "Option::is_none")]
    pub nickname: Option<String>,
    /// Config in JSON format.
    #[serde(rename = "routerConfigJson", skip_serializing_if = "Option::is_none")]
    pub router_config_json: Option<String>,
}

impl RouterConfigResponse {
    pub fn new() -> RouterConfigResponse {
        RouterConfigResponse {
            account_number: None,
            config_id: None,
            nickname: None,
            router_config_json: None,
        }
    }
}

