/*
 * Starlink Enterprise API
 *
 * <h3>Description</h3>API to manage accounts and user terminals. This page is deprecated, please use the new documentation site: <a href='https://starlink.readme.io/'>https://starlink.readme.io/</a><h3>Authentication - OIDC</h3><p>To authenticate with this API using OIDC, <a target='_blank' href='/api/auth/.well-known/openid-configuration'>Well Known URL</a> and attach the result to your requests with the <strong>Authorize</strong> button below.</p>
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RouterResponse {
    /// Router Id.
    #[serde(rename = "routerId", skip_serializing_if = "Option::is_none")]
    pub router_id: Option<String>,
    /// Nickname of the router.
    #[serde(rename = "nickname", skip_serializing_if = "Option::is_none")]
    pub nickname: Option<String>,
    /// Account Number this router is bonded to.
    #[serde(rename = "accountNumber", skip_serializing_if = "Option::is_none")]
    pub account_number: Option<String>,
    /// User terminal Id this router is bonded to.
    #[serde(rename = "userTerminalId", skip_serializing_if = "Option::is_none")]
    pub user_terminal_id: Option<String>,
    /// Router config this router is assigned to, or empty if no config assigned.
    #[serde(rename = "configId", skip_serializing_if = "Option::is_none")]
    pub config_id: Option<String>,
    /// True if this router is known to be directly connected to a user terminal.
    #[serde(rename = "directLinkToDish", skip_serializing_if = "Option::is_none")]
    pub direct_link_to_dish: Option<bool>,
    /// Hardware version of the router: 'v1', 'v2', or 'v3'.
    #[serde(rename = "hardwareVersion", skip_serializing_if = "Option::is_none")]
    pub hardware_version: Option<String>,
    /// Last time the router bonded to a user terminal
    #[serde(rename = "lastBonded", skip_serializing_if = "Option::is_none")]
    pub last_bonded: Option<String>,
}

impl RouterResponse {
    pub fn new() -> RouterResponse {
        RouterResponse {
            router_id: None,
            nickname: None,
            account_number: None,
            user_terminal_id: None,
            config_id: None,
            direct_link_to_dish: None,
            hardware_version: None,
            last_bonded: None,
        }
    }
}

