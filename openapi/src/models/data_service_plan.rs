/*
 * Starlink Enterprise API
 *
 * <h3>Description</h3>API to manage accounts and user terminals. This page is deprecated, please use the new documentation site: <a href='https://starlink.readme.io/'>https://starlink.readme.io/</a><h3>Authentication - OIDC</h3><p>To authenticate with this API using OIDC, <a target='_blank' href='/api/auth/.well-known/openid-configuration'>Well Known URL</a> and attach the result to your requests with the <strong>Authorize</strong> button below.</p>
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataServicePlan {
    #[serde(rename = "isoCurrencyCode")]
    pub iso_currency_code: String,
    #[serde(rename = "isMobilePlan")]
    pub is_mobile_plan: bool,
    #[serde(rename = "activeFrom", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub active_from: Option<Option<String>>,
    #[serde(rename = "subscriptionActiveFrom", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subscription_active_from: Option<Option<String>>,
    #[serde(rename = "subscriptionEndDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subscription_end_date: Option<Option<String>>,
    #[serde(rename = "overageName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub overage_name: Option<Option<String>>,
    #[serde(rename = "overageDescription", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub overage_description: Option<Option<String>>,
    #[serde(rename = "isOptedIntoOverage")]
    pub is_opted_into_overage: bool,
    #[serde(rename = "overageLineDeactivatedDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub overage_line_deactivated_date: Option<Option<String>>,
    #[serde(rename = "overageLine", skip_serializing_if = "Option::is_none")]
    pub overage_line: Option<Box<models::DataUsageOverageLine>>,
    #[serde(rename = "dataPoolUsage", skip_serializing_if = "Option::is_none")]
    pub data_pool_usage: Option<Box<models::DataPoolUsagePublicResponse>>,
    #[serde(rename = "productId")]
    pub product_id: String,
    #[serde(rename = "usageLimitGB")]
    pub usage_limit_gb: f64,
    #[serde(rename = "dataCategoryMapping")]
    pub data_category_mapping: std::collections::HashMap<String, models::DataBucketType>,
}

impl DataServicePlan {
    pub fn new(iso_currency_code: String, is_mobile_plan: bool, is_opted_into_overage: bool, product_id: String, usage_limit_gb: f64, data_category_mapping: std::collections::HashMap<String, models::DataBucketType>) -> DataServicePlan {
        DataServicePlan {
            iso_currency_code,
            is_mobile_plan,
            active_from: None,
            subscription_active_from: None,
            subscription_end_date: None,
            overage_name: None,
            overage_description: None,
            is_opted_into_overage,
            overage_line_deactivated_date: None,
            overage_line: None,
            data_pool_usage: None,
            product_id,
            usage_limit_gb,
            data_category_mapping,
        }
    }
}

