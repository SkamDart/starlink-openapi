/*
 * Starlink Enterprise API
 *
 * <h3>Description</h3>API to manage accounts and user terminals. This page is deprecated, please use the new documentation site: <a href='https://starlink.readme.io/'>https://starlink.readme.io/</a><h3>Authentication - OIDC</h3><p>To authenticate with this API using OIDC, <a target='_blank' href='/api/auth/.well-known/openid-configuration'>Well Known URL</a> and attach the result to your requests with the <strong>Authorize</strong> button below.</p>
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateSandboxClientRequest {
    /// Identifier of the client to add or remove from a sandbox.
    #[serde(rename = "clientId")]
    pub client_id: String,
    /// Identifier used to separate sandbox environments. Per-client sandboxing is shared within the same SandboxId.
    #[serde(rename = "sandboxId")]
    pub sandbox_id: i32,
    /// Expiry of the sandbox state as a UTC date time.
    #[serde(rename = "expiry")]
    pub expiry: String,
    /// Router to immediately update.
    #[serde(rename = "routerId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub router_id: Option<Option<String>>,
}

impl UpdateSandboxClientRequest {
    pub fn new(client_id: String, sandbox_id: i32, expiry: String) -> UpdateSandboxClientRequest {
        UpdateSandboxClientRequest {
            client_id,
            sandbox_id,
            expiry,
            router_id: None,
        }
    }
}

